Модуль навигации GPS Глонасс
============================


.. image:: /_static/images/gps_module.png
	:align: center

Модуль позволяет квадрокоптеру отслеживать свое текущее положение и скорость. Для большей точности позиционирования антенне модуля необходим обзор неба, не используйте режим GPS в помещении.

Модуль GPS/Глонасс устанавливается непосредственно на главную плату квадрокоптера сверху и крепится к ней винтами М3. При подключении дополнительных модулей на нижнюю плату расширения их шлейфы стыкуются с разъемами на верхней части модуля GPS, таким образом подключаясь к основной плате "сквозь" модуль GPS. 

Модуль также оснащен компасом для точной ориентации в пространстве. Показания компаса могут искажаться вблизи массивных металлических объектов и зданий. 

При `подключении к Pioneer Station`_  убедитесь, что в "параметрах автопилота" выбран режим позиционирования по GPS, в противном случае активируйте его нажатем на кнопку. В стандартном режиме подключения работу компаса можно наблюдать на панели авиагоризонта. 

.. note:: При первом подключении рекомендуется убедиться в правильной работе компаса. Сориентируйте Пионер по оси "север-юг" и убедитесь, что показания в Pioneer Station соответствуют сторонам света при повороте квадрокоптера на 90 градусов. Если погрешность превышает 10 градусов, выберите "калибровка - компаса" в меню Pioneer Station и следуйте указаниям помощника.

Также в реальном времени отображается количество спутников, доступных для работы. Чем больше спутников "видит" модуль, тем выше точность позиционирования. При холодном старте (первом включении модуля в новой точке) синхронизация занимает от одной до трех минут. При успешной синхронизации зеленый светодиод на модуле горит постоянно. Теперь, если выключить питание "Пионера" и через некоторое время снова включить в той же точке, синхронизация произойдет значительно быстрее.

+-------------------------+--------------------+---------------------------------+
| LED индикация           | состояние          | что делать                      |
+=========================+====================+=================================+
| горят красный и зеленый | неверные параметры | переключить параметры на GPS    |
+-------------------------+--------------------+---------------------------------+
| горит красный           | поиск спутников    | ждать 1-3 минуты, перезагрузить |
+-------------------------+--------------------+---------------------------------+
| горит зеленый           | спутники найдены   | можно лететь                    |
+-------------------------+--------------------+---------------------------------+

.. _подключении к Pioneer Station: ../programming/pioneer_station/pioneer_station_upload.html 

Управляя квадрокоптером с пульта, выберите режим работы с системой навигации (тумблер SwB в среднем положении), и "Пионер" будет использовать подключенный модуль GPS, что сделает полет более стабильным. 

При программировании полёта используется команда ap.goToLocalPoint(x, y, z). При этом ось x направлена на восток, ось y - на север. Значение z определяет высоту относительно точки старта. Все значения указываются в метрах.

.. image:: /_static/images/gpsaxes.png
	:align: center

Также можно использовать команду ap.goToPoint(x, y, z). Здесь x, y это географические координаты (широта, долгота) точки, в которую полетит Пионер. Z - высота в этой точке относительно точки старта. 

.. note:: Если указанная точка старта будет дальше, чем в 500 метрах от фактического местоположения, квадрокоптер откажется взлетать. Также, параметры Flight_com_flyAreaSize и Flight_com_maxAltitude ограничивают расстояние и высоту, на которую коптер может улететь от точки старта. Подробнее - в описании параметров в Pioneer Station.



Пример
-----------
Ниже приведен пример программы, использующий модуль GPS. Загрузите программу на Пионер, найдите подходящую площадку и подключите аккумулятор. Когда светодиод на модуле перестанет мигать, переключите SwB в нижнее положение и запустите выполнение программы, нажав кнопку "Старт" на базовой плате квадрокоптера. Через 5 секунд Пионер взлетит, пролетит на 10 метров на восток и вернется на точку старта. 

Пионер определяет свое местоположение в момент запуска моторов. Эта точка принимается за начало координат при выполнении команды ap.goToLocalPoint.

Неточность позиционирования с GPS и ошибка определения высоты могут достигать 3 метров. Учитывайте это при составлении своих полетных программ.

::

	-- https://learnxinyminutes.com/docs/ru-ru/lua-ru/ ссылка для быстрого ознакомления с основами языка LUA
	-- количество светодиодов на основной плате пионера
	local ledNumber = 4
	-- создание порта управления светодиодами
	local leds = Ledbar.new(ledNumber)
	-- ассоциируем функцию распаковки таблиц из модуля table для упрощения
	local unpack = table.unpack

	-- переменная текущего состояния
	local curr_state = "PREPARE_FLIGHT"

	-- функция, изменяющая цвет 4-х RGB светодиодов на основной плате пионера
	local function changeColor(color)
	    -- проходим в цикле по всем светодиодам с 0 по 3
	    for i=0, ledNumber - 1, 1 do
	        leds:set(i, unpack(color))
	    end
	end 

	-- таблица цветов в формате RGB для передачи в функцию changeColor
	local colors = {
	        {1, 0, 0}, -- красный
	        {1, 1, 1}, -- белый
	        {0, 1, 0}, -- зеленый
	        {1, 1, 0}, -- желтый
	        {1, 0, 1}, -- фиолетовый
	        {0, 0, 1}, -- синий
	        {0, 0, 0}  -- черный/отключение светодиодов
	}

	-- таблица функций, вызываемых в зависимости от состояния
	action = {
	    ["PREPARE_FLIGHT"] = function(x)
	        changeColor(colors[2]) -- смена цвета светодиодов на белый
	        Timer.callLater(2, function () ap.push(Ev.MCE_PREFLIGHT) end) -- через 2 секунды отправляем команду автопилоту на запуск моторов
	        Timer.callLater(4, function () changeColor(colors[3]) end)-- еще через 2 секунды (суммарно 4 секунды, так как таймеры запускаются сразу же друг за другом) меняем цвета светодиодов на зеленый
	        Timer.callLater(6, function () 
	            ap.push(Ev.MCE_TAKEOFF) -- еще через 2 секунды (суммарно через 6 секунд) отправляем команду автопилоту на взлет
	            curr_state = "FLIGHT_TO_FIRST_POINT" -- переход в следующее состояние
	        end)
	    end,
	    ["FLIGHT_TO_FIRST_POINT"] = function (x) 
	        changeColor(colors[4]) -- смена цвета светодиодов на желтый
	        Timer.callLater(2, function ()
	            ap.goToLocalPoint(10, 0, 5) -- отправка команды автопилоту на полет к точке с координатами (10 м, 0 м, 5 м) 
	            curr_state = "FLIGHT_TO_SECOND_POINT" -- переход в следующее состояние
	        end) 
	    end,
	    ["FLIGHT_TO_SECOND_POINT"] = function (x) 
	        changeColor(colors[5]) -- смена цвета светодиодов на фиолетовый
	        Timer.callLater(2, function ()
	            ap.goToLocalPoint(0, 0, 3) -- отправка команды автопилоту на полет к точке взлета (0 м, 0 м, 3 м)
	            curr_state = "PIONEER_LANDING" -- переход в следующее состояние
	        end)
	    end,
	    ["PIONEER_LANDING"] = function (x) 
	        changeColor(colors[6]) -- смена цвета светодиодов на синий
	        Timer.callLater(2, function () 
	            ap.push(Ev.MCE_LANDING) -- отправка команды автопилоту на посадку
	        end)
	    end
	}

	-- функция обработки событий, автоматически вызывается автопилотом
	function callback(event)
	    -- если достигнута необходимая высота, то выполняем функцию из таблицы, соответствующую текущему состоянию
	    if (event == Ev.ALTITUDE_REACHED) then
	        action[curr_state]()
	    end
	    -- если Пионер с чем-то столкнулся, то зажигаем светодиоды красным
	    if (event == Ev.SHOCK) then
	        changeColor(colors[1])

	    end
	    -- если Пионер достиг точки, то выполняем функцию из таблицы, соответствующую текущему состоянию
	    if (event == Ev.POINT_REACHED) then
	        action[curr_state]()
	    end

	    -- если Пионер приземлился, то выключаем светодиоды
	    if (event == Ev.COPTER_LANDED) then
	        changeColor(colors[7])
	    end

	end

	-- включаем светодиод (красный цвет)
	changeColor(colors[1])
	-- запускаем одноразовый таймер на 2 секунды, а когда он закончится, выполняем первую функцию из таблицы (подготовка к полету)
	Timer.callLater(2, function () action[curr_state]() end)
