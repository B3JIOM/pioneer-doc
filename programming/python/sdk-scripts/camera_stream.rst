Скрипт Сamera_Stream
====================

Скрипт Сamera_stream.py служит примером получения изображения с камеры
квадрокоптера Pioneer Mini и предназначен для проверки камеры и обмена
информации между ПК и коптером.

Разбор скрипта.
---------------

1. Импортируем необходимые библиотеки и определяем их назначение:

  - | **Pioneer_sdk** – библиотека для управления квадрокоптером;
    | Описание библиотеки Pioneer_sdk - https://pioneer-doc.readthedocs.io/ru/master/programming/python/pioneer-sdk-methods.html;
  
  - | **NumPy** – библиотека для работы с массивами данных;
    | Описание библиотеки NumPy - https://numpy.org/doc/stable/;
  
  - | **Cv2** – библиотека машинного зрения;
    | Описание библиотеки OpenCV Описание библиотеки OpenCV - https://docs.opencv.org/master/index.html.

  .. code-block:: python

    from pioneer_sdk import Pioneer
    import numpy as np
    import cv2*

2. Далее используем конструкцию **if \__name_\_ == '__main__':**, которая является точкой входа в программу. Всё, что идёт до этого условия, выполнятся всегда: и при вызове в качестве модуля и при вызове, как исполняемый файл.

  | Подробное описание данной конструкции: https://docs.python.org/3/library/__main__.html

3. Создаём экземпляр класса Pioneer, чтобы начать работать с квадрокоптером.

  | Что такое класс и его экземпляры https://docs.python.org/3/tutorial/classes.html

  .. code-block:: python

    pioneer_mini = Pioneer()

  В бесконечном цикле будем получать изображение от коптера и выводить его на экран. Это будет выполнятся до нажатия на клавишу Escape:

4. В переменную **camera_frame** передаём изображение от квадрокоптера:

  - | **cv2.imdecode(buf, flag)** – чтение изображения из указного массива, где:
    | *buf* – читаемый массив;
    | *flag* – тип изображения.

  - | **np.frombuffer(buffer,dtype)** - интерпретирует буфер как одномерный массив, где:
    | *buffer* - буфер-подобный объект;
    | *dtype* – тип данных, которым будут интерпретироваться элементы массива.

  - | **pioneer_sdk.get_raw_video_frame()** – возвращает массив байт представляющий собой jpg картнку.

  Выходит, следующая строчка:

  .. code-block:: python

    camera_frame = cv2.imdecode(np.frombuffer(pioneer_mini.get_raw_video_frame(), dtype=np.uint8), cv2.IMREAD_COLOR)

5. Затем выводим camera_frame на экран:

  .. code-block:: python

    cv2.imshow('pioneer_camera_stream', camera_frame)

  - | **cv2.imshow(name,image)** – выводит изображение в окне, где:
    | *name* – имя создаваемого окна;
    | *image* - выводимое изображение.

6. Создаём условие выхода по нажатию на клавишу Escape:

  - | Создаём обработчик нажатий клавиш на клавиатуре: **key = cv2.waitKey(1)** 
  - | Условие **if key == 27:** ожидает нажатия клавиши Escape.
  - | При выполнении условия печатаем в терминал сообщение о нажатии, методом **cv2.destroyAllWindows()** закрываем окно с изображением и
      командой **exit(0)** останавливаем программу.

  .. code-block:: python

    key = cv2.waitKey(1)
    if key == 27:  # esc
      print('esc pressed')
      cv2.destroyAllWindows()
      exit(0)

Вопросы для самостоятельного разбора.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

| 1) Вывести окно с Ч/Б изображением.
| 2) Вывести несколько окон с разными характеристиками отображения.
| 3) Используя библиотеку OpenCV добавьте функционал по распознаванию лица.
| 4) Попробуйте сохранить видеопоток в память ПК.
