Скрипт LED_hight_change
=======================

Скрипт LED_hight_change служит для изучения методов управления светодиодами и получения данных от дальномера на квадрокоптере Pioneer
Mini.

Разбор скрипта
--------------

1. Импортируем необходимые библиотеки и определяем их назначение:

  - | **Pioneer_sdk** – библиотека для управления квадрокоптером;
    | Описание библиотеки Pioneer_sdk - https://pioneer-doc.readthedocs.io/ru/master/programming/python/pioneer-sdk-methods.html;

  - | **time** – библиотека для работы со временем;
    | Описание библиотеки time - https://docs.python.org/3/library/time.html.

  .. code-block:: python

    from pioneer_sdk import Pioneer
    import time*

2. Создаём ряд переменных:

  - | **delta = 0.1** - переменная отвечающая за периодичность обработки данных от дальномера.

  - | **m_to_led = 1000** - множитель яркости цветов.

  - | **led_min = 0** - переменная отвечающая за яркость цвета на светодиоде. 0 – отсутсвие свечения.

  - | **led_max = 255** - переменная отвечающая за яркость цвета на светодиоде. 255 - Максимально яркое свечение.

  - | **r = led_min** - переменная отвечающая за яркость красного цвета.

  - | **g = led_min** - переменная отвечающая за яркость зелёного цвета.

  - | **b = led_min** - переменная отвечающая за яркость синего цвета.

  - | **low = 0.25** - порог 1 по расстоянию. Задаётся в метрах.

  - | **mid = 0.5** # Порог 2 по расстоянию. Задаётся в метрах.

  - | **high = 0.75** # Порог 3 по расстоянию. Задаётся в метрах.

  .. code-block:: python

    delta = 0.1
    m_to_led = 1000

    led_min = 0
    led_max = 255

    r = led_min
    g = led_min
    b = led_min

    low = 0.25
    mid = 0.5
    high = 0.75

3. Далее используем конструкцию **if \__name_\_ == '__main__':**, которая является точкой входа в программу. Всё, что идёт до этого условия, выполнятся всегда: и при вызове в качестве модуля и при вызове, как исполняемый файл.

  | Подробное описание данной конструкции: https://docs.python.org/3/library/__main__.html

  .. code-block:: python

    if __name__ == '__main__':

4. Создаём экземпляр класса Pioneer, чтобы начать работать с квадрокоптером.

  .. code-block:: python

    pioneer_mini = Pioneer()

   С понятием, что такое класс и его экземпляры можно ознакомиться по ссылке https://docs.python.org/3/tutorial/classes.html

5. Создаём переменную, которая отслеживает текущее время.

  .. code-block:: python

    curr_time = time.time()

  В бесконечном цикле будем получать данные от дальномера и, в зависимости от расстояния, менять цвета и яркость на светодиодах. Это будет выполнятся до нажатия на клавишу Escape:

  .. code-block:: python
    
    while True:*

6. Условием **if time.time()-curr_time > delta:** отслеживаем, прошло ли 0.1 секунды.

  .. code-block:: python

    if time.time()-curr_time > delta:

7. Методом **.get_dist_sensor_data()** получаем от дальномера расстояние в метрах:

  .. code-block:: python

    tof_data = pioneer_mini.get_dist_sensor_data()

8. Проверяем наличие какого-либо значения на дальномере **if tof_data is not None:**. Если значение имеется, то запускаем ряд условий, которые проверяют то, в  каком диапазоне находится значение по расстоянию, и в зависимости от этого выставляем значение красного, зелёного и синего цветов:

  | *if tof_data <= low:* --- Если меньше и равно 1-у порогу по расстоянию, то...
  | *r = tof_data*m_to_led* --- Значению красного присваиваем интенсивно меняющееся значение.
  | *g = led_min* --- Значение зелёного приравниваем к нулю.
  | *b = led_min* --- Значение синего приравниваем к нулю.

  | *elif low < tof_data <= mid:* --- Иначе, если больше 1-го порога, но меньше или равно 2-у, то...
  | *r = (tof_data-low)*m_to_led* --- Значению красного присваиваем интенсивно меняющееся значение.
  | *g = (tof_data-low)*m_to_led* --- Значению зелёного присваиваем интенсивно меняющееся значение.
  | *b = led_min* --- Значение синего приравниваем к нулю.

  | *elif mid < tof_data <= high:* --- Иначе, если больше 2-го порога, но меньше или равно 3-у, то...
  | *r = led_min* --- Значение красного приравниваем к нулю.
  | *g = (tof_data-mid)*m_to_led* --- Значению зелёного присваиваем интенсивно меняющееся значение.
  | *b = led_min* --- Значение синего приравниваем к нулю.

  | *elif tof_data >= high:* --- Иначе, если больше 3-го порога, то...
  | *r = led_min* --- Значение красного приравниваем к нулю.
  | *g = led_min* --- Значение зелёного приравниваем к нулю.
  | *b = led_max* --- Значение синего максимально.

  .. code-block:: python

    if tof_data is not None:
    if tof_data <= low:
        r = tof_data*m_to_led
        g = led_min
        b = led_min
    elif low < tof_data <= mid:ch
        r = (tof_data-low)*m_to_led
        g = (tof_data-low)*m_to_led
        b = led_min
    elif mid < tof_data <= high:
        r = led_min
        g = (tof_data-mid) * m_to_led
        b = led_min
    elif tof_data >= high:
        r = led_min
        g = led_min
        b = led_max

9. Затем методом **.led_control(r=r, g=g, b=b)** выводим получившиеся значение RGB. В конце, инструкцией **curr_time = time.time()** обновляем текущее время:

  .. code-block:: python

    pioneer_mini.led_control(r=r, g=g, b=b)
    curr_time = time.time()

Вопросы для самостоятельного разбора.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

| 1) Перевести цвета в другие цветовые модели, например из RGB в HSV.
| 2) Инвертируйте цвета в примере.
| 3) Совместите данный скрипт со скриптом WASD_flight.
